<%-- 
Name: Generated.cs.cst
Author: Quinn Gil
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" src="../MasterCodeBehind.cs" %>

<%-- 01) Module --%>
<%@ Property Name="ModuleName" Type="System.String" Optional="False" Category="01) Module" Description="The Name of the Module" %>
<%@ Property Name="CodeSafeModuleName" Type="System.String" Optional="False" Category="01) Module" Description="A version of the module name that is safe to use in code, Alpha Only is safest." %>
<%@ Property Name="RootNamespace" Type="System.String" Optional="False" Category="01) Module" Description="The namespace the module belongs in. (eg - {CompanyName}.Modules). The name of the module will be appended." %>

<%-- 01.1) Module Controls --%>
<%@ Property Name="HasSettingControl" Type="System.Boolean" Optional="True" Default="True" Category="01.1) Module Controls" Description="Will include the Settings.ascx files." %>
<%@ Property Name="AdditionalControls" Type="System.String" Optional="True" Category="01.1) Module Controls" Description="Semi-Colon seperated list of the Names {no whitespace} of the controls. eg - Edit;AddNew;AdminEdit" %>

<%-- 01.2) Module Permissions --%>
<%@ Property Name="HasDnnExtendPermissions" Type="System.Boolean" Optional="True" Default="False" Category="01.2) Module Permissions" Description="DNN Profession+ and Oliver Hine's Extended Persmission have these active." %>
<%@ Property Name="AdditionalPermissions" Type="System.String" Optional="True" Category="01.2) Module Permissions" Description="Semi-Colon seperated list of the Names {no whitespace} of the Permissions. eg - AddNew;AdminEdit" %>

<%-- 02) DotNetNuke --%>
<%@ Property Name="OwnerFolder" Type="System.String" Optional="False" Category="02) DotNetNuke" Description="Folder under DesktopModules to place the module folder. eg - DesktopModule\{OwnerFolder}\CodeSafeModuleName" %>

<%-- 02.2) DotNetNuke Manifest --%>
<%@ Property Name="ManifestFriendlyName" Type="System.String" Optional="True" Category="02.2) DotNetNuke Manifest" Description="" %>

<%--Begin File Generation Code --%>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeSmith Tools on <%= DateTime.Now %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using DotNetNuke.Common;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Security;
using DotNetNuke.Security.Permissions;
using DotNetNuke.UI.Modules;

namespace  <%= RootNamespace %>.<%= CodeSafeModuleName %>.Components
{
    public struct ControlKey
    {
        <% if(!String.IsNullOrEmpty(AdditionalControls)) { foreach(string s in AdditionalControls.Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)) { %>
        public static string <%= s %> = "<%= s %>";
        public static string <%= s %>Name = "<%= Utils.SplitCamelCase(s) %>";<% } } %>
    }

    public struct Definition
    {
        public static string ModuleFriendlyName = "<%= ManifestFriendlyName %>";
        public static string ModuleName = "<%= ModuleName %>";
        public static string CodeSafeModuleName = "<%= CodeSafeModuleName %>";
        public static string OwnerFolder = "<%= OwnerFolder %>";
    }

    public class Security
    {
        public struct PermissionName
        {<% foreach(string s in (AdditionalPermissions + MasterCodeBehind.DefaultPermissions + (HasDnnExtendPermissions ? MasterCodeBehind.ExtendedPermissions : String.Empty)).Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)) { %>
            public static string <%= s %> = "<%= Utils.SplitCamelCase(s) %>";<% } %>
        }
        
        public struct PermissionKey
        {<% foreach(string s in (AdditionalPermissions + MasterCodeBehind.DefaultPermissions + (HasDnnExtendPermissions ? MasterCodeBehind.ExtendedPermissions : String.Empty)).Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)) { %>
            public static string <%= s %> = "<%= s.ToUpper() %>";<% } %>
        }
        
        <% foreach(string s in (AdditionalPermissions + MasterCodeBehind.DefaultPermissions + (HasDnnExtendPermissions ? MasterCodeBehind.ExtendedPermissions : String.Empty)).Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)) { %>
        public bool IsAllowedTo<%= s %>  { get; private set; }
        <% } %>
        
        public Security(ModuleInstanceContext context): this(context.ModuleId, context.TabId){}
        public Security(int moduleId, int tabId)
        {
            var module = new ModuleController().GetModule(moduleId, tabId);
            
            if (module == null) return;

            var mp = module.ModulePermissions;

            <% foreach(string s in (AdditionalPermissions + MasterCodeBehind.DefaultPermissions + (HasDnnExtendPermissions ? MasterCodeBehind.ExtendedPermissions : String.Empty)).Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)) { %>
            IsAllowedTo<%= s %> = ModulePermissionController.HasModulePermission(mp, PermissionKey.<%= s %>);
            <% } %>
        }

        public bool IsAdministrator
        {
            get { return PortalSecurity.IsInRole(Globals.GetPortalSettings().AdministratorRoleName); }
        }

        public bool IsSuperUser
        {
            get { return Globals.GetPortalSettings().UserInfo.IsSuperUser; }
        }
    }
}