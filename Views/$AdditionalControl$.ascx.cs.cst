<%-- 
Name: $AdditionalControl$.ascx.cs.cst
Author: Quinn Gil
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" src="../MasterCodeBehind.cs" %>

<%-- 01) Module --%>
<%@ Property Name="CodeSafeModuleName" Type="System.String" Optional="False" Category="01) Module" Description="A version of the module name that is safe to use in code, Alpha Only is safest." %>
<%@ Property Name="RootNamespace" Type="System.String" Optional="False" Category="01) Module" Description="The namespace the module belongs in. (eg - {CompanyName}.Modules). The name of the module will be appended." %>

<%-- 01.1) Module Controls --%>
<%@ Property Name="AdditionalControl" Type="System.String" Optional="False" Category="01.1) Module Controls" Description="The control that this is being generated for." %>
<%@ Property Name="AdditionalControls" Type="System.String" Optional="True" Category="01.1) Module Controls" Description="Semi-Colon seperated list of the Names {no whitespace} of the controls. eg - Edit;AddNew;AdminEdit" %>

<%-- 01.2) Module Permissions --%>
<%@ Property Name="HasDnnExtendPermissions" Type="System.Boolean" Optional="True" Default="False" Category="01.2) Module Permissions" Description="DNN Profession+ and Oliver Hine's Extended Persmission have these active." %>
<%@ Property Name="AdditionalPermissions" Type="System.String" Optional="True" Category="01.2) Module Permissions" Description="Semi-Colon seperated list of the Names {no whitespace} of the Permissions. eg - AddNew;AdminEdit" %>

<%-- 01.3) Module Interfaces --%>
<%@ Property Name="IActionable" Type="System.Boolean" Optional="True" Default="False" Category="01.3) Module Interfaces" Description="If the View control implementats of IActionable." %>
<%@ Property Name="IModuleListener" Type="System.Boolean" Optional="True" Default="False" Category="01.3) Module Interfaces" Description="If the View control implementats of IModuleListener." %>
<%@ Property Name="IModuleCommunicator" Type="System.Boolean" Optional="True" Default="False" Category="01.3) Module Interfaces" Description="If the View control implementats of IModuleCommunicator." %>

<%-- 02) DotNetNuke --%>
<%@ Property Name="DotNetNukeDirectory" Type="System.String" Optional="False" Category="02) DotNetNuke" Description="DotNetNuke website directory to host module testing. This will also be the DNN.DLL Referenced by the project." Editor="System.Windows.Forms.Design.FolderNameEditor" %>

<%-- 05) ASP.NET --%>
<%@ Property Name="netVersion" Type="MasterCodeBehind.dotNet.Version" Optional="False" Category="05) ASP.NET" Description="Version of .NET to set the module to." %>

<%-- 06) Additional DLLs --%>
<%@ Property Name="AdditionalDllsIncludedInZip" Type="System.String" Optional="True" Category="06) Additional DLLs" Description="Semi-Colon seperated list of locations for Additional DLLs to be included in the reference. Non-Pathed DLLs are assumed to be in /bin of the DotnetnukeDirectory. These will be included in the zip file." %>
<%@ Property Name="AdditionalDllsNotZipped" Type="System.String" Optional="True" Category="06) Additional DLLs" Description="Semi-Colon seperated list of locations for Additional DLLs to be included in the reference. Non-Pathed DLLs are assumed to be in /bin of the DotnetnukeDirectory. These will NOT be included in the zip file." %>

<%-- 07) JavaScript & CSS --%>
<%@ Property Name="IncludeTemplateAjaxWrapper" Type="System.Boolean" Optional="True" Default="False" Category="07) JavaScript and CSS" Description="Adds some code designed to handle customized jQuery AJAX requests." %>

<%-- 08) Data Access Layer --%>
<%@ Property Name="DataAccessLayerProvider" Type="MasterCodeBehind.DataAccessLayer.Types" Optional="True" Default="None" Category="08) Data Access Layer" Description="Type of Data Access Layer to include in the template." %>
<%-- 08.netTiers) Data Access Layer --%>
<%@ Property Name="netTiersLocation" Type="System.String" Optional="True" Category="08.netTiers) Data Access Layer" Editor="System.Windows.Forms.Design.FolderNameEditor" Description="Location of the root folder for the netTiers solution. The root folder needs to be the same name as the root namespace of the netTiers project." %>

<%-- 09) Logging --%>
<%@ Property Name="LoggingProvider" Type="MasterCodeBehind.Logging.Types" Optional="True" Default="None" Category="08) Logging" Description="Type of Logging to include in the template." %>

<%-- 11) Remote Bug Submission --%>
<%@ Property Name="RemoteBugSubProvider" Type="MasterCodeBehind.RemoteBugSub.Types" Optional="True" Default="None" Category="11) Remote Bug Submission" Description="Type of Remote Bug Submission to include in the template." %>

<%--Begin File Generation Code --%>
using System;
using System.Web;
using System.Web.UI;
using  <%= RootNamespace %>.<%= CodeSafeModuleName %>.Components;
using DotNetNuke.Common;
using DotNetNuke.Services.Exceptions;
using DotNetNuke.Framework;
<% if(AdditionalControl == MasterCodeBehind.ViewControl && IActionable){ %>using DotNetNuke.Entities.Modules;
using DotNetNuke.Entities.Modules.Actions;<% } %>
<% if(AdditionalControl == MasterCodeBehind.ViewControl && (IModuleListener || IModuleCommunicator)) { %>using DotNetNuke.Entities.Modules.Communications; <% } %>
<%-- Removing MVC
using DotNetNuke.Web.Mvp;
using WebFormsMvp.Web;
using WebFormsMvp;
using <%= RootNamespace %>.<%= CodeSafeModuleName %>.Views;
using <%= RootNamespace %>.<%= CodeSafeModuleName %>.Views.Model;
using <%= RootNamespace %>.<%= CodeSafeModuleName %>.Views.Presenter;
--%>
using DotNetNuke.Entities.Modules;
<% if(!String.IsNullOrEmpty(AdditionalDllsIncludedInZip)) { foreach(string s in AdditionalDllsIncludedInZip.Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)) { %>
<% if(System.IO.File.Exists(s)) { %>using <%= System.IO.Path.GetFileNameWithoutExtension(s) %>;<% } else { %>using <%= System.IO.Path.GetFileNameWithoutExtension(DotNetNukeDirectory + @"\bin\" + s) %>;<% } %>
<% } } %>
<% if(!String.IsNullOrEmpty(AdditionalDllsNotZipped)) { foreach(string s in AdditionalDllsNotZipped.Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)){ %>
<% if(System.IO.File.Exists(s)) { %>using <%= System.IO.Path.GetFileNameWithoutExtension(s) %>;<% } else { %>using <%= System.IO.Path.GetFileNameWithoutExtension(DotNetNukeDirectory + @"\bin\" + s) %>;<% } %>
<% } } %>
<%  string dalLocation = String.Empty;
    switch(DataAccessLayerProvider)
    {
        case MasterCodeBehind.DataAccessLayer.Types.netTiers:
            dalLocation = netTiersLocation;
        break;
        default:
            //Do Nothing
            break;
    }
    if(!String.IsNullOrEmpty(dalLocation)){ %>
<%= MasterCodeBehind.DataAccessLayer.Usings(DataAccessLayerProvider, dalLocation) %> <% } %>

<%-- Removing MVC
<% if(AdditionalControl == MasterCodeBehind.ViewControl) { %>/*
    Model-view-presenter (MVP) is a user interface design pattern engineered to facilitate automated unit testing
        and improve the separation of concerns in presentation logic.
 *
    * Model         An interface defining the data to be displayed 
                        or otherwise acted upon in the user interface.
 * 
    * View          An interface that displays data (the model) 
                        and routes user commands (events) to the 
                        presenter to act upon that data.
 * A
    * Presenter     Acts upon the model and the view. It retrieves data 
                        from repositories (the model), persists it, 
                        and formats it for display in the view.
*/<% } %>
--%>
namespace <%= RootNamespace %>.<%= CodeSafeModuleName %>.Views
{
    <%-- Removing MVC
    [PresenterBinding(typeof(<%= AdditionalControl %>Presenter))]
    public partial class <%= AdditionalControl %> : ModuleView<<%= AdditionalControl %>Model>, I<%= AdditionalControl %>View
    --%>
    public partial class <%= AdditionalControl %> : PortalModuleBase<% if(AdditionalControl == MasterCodeBehind.ViewControl){ if(IActionable){ %>, IActionable <% } if(IModuleListener){ %>, IModuleListener<% } if(IModuleCommunicator){ %>, IModuleCommunicator<% } }%>
    {
        <%-- Not in DNN 7
        private ModuleInfo Module { get; set; }
        --%>
        private Security Permissions { get; set; }
<%-- Removing MVC
        #region Implementation of I<%= AdditionalControl %>View

        #region View Events
        public event EventHandler<<%= AdditionalControl %>EventNameEventArgs> <%= AdditionalControl %>EventName;
        <% if(AdditionalControl != MasterCodeBehind.ViewControl) { %>public event EventHandler<EventArgs> GoBack;<% } %>
        #endregion

        #region View Event Bubbles
        <% if(AdditionalControl != MasterCodeBehind.ViewControl) { %>private void OnGoBack()
        {
            <%= MasterCodeBehind.Logging.DebugEnter(LoggingProvider, netVersion) %>
            if (GoBack != null) GoBack(Response, new EventArgs());
            <%= MasterCodeBehind.Logging.DebugExit(LoggingProvider, netVersion) %>
        }
        <% } %>
        
        private void On<%= AdditionalControl %>EventName()
        {
            <%= MasterCodeBehind.Logging.DebugEnter(LoggingProvider, netVersion) %>
            if (<%= AdditionalControl %>EventName != null) <%= AdditionalControl %>EventName(Response, new <%= AdditionalControl %>EventNameEventArgs("SomeKindaMessage Text"));
            <%= MasterCodeBehind.Logging.DebugExit(LoggingProvider, netVersion) %>
        }
        #endregion

        #endregion
--%>        
        <% if(IActionable && AdditionalControl == MasterCodeBehind.ViewControl){ %>
        #region Implementation of IActionable
		///<summary>
		/// Adds an item to the Menu
		///</summary>
        public ModuleActionCollection ModuleActions
        {
            get 
            {
				var actions = new ModuleActionCollection();
				<% if(!String.IsNullOrEmpty(AdditionalControls)) { foreach(string s in AdditionalControls.Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)) { %>
                actions.Add(ModuleContext.GetNextActionID(), ControlKey.<%= s %>Name, ModuleActionType.AddContent, "", "", 
                    Globals.NavigateURL(ControlKey.<%= s %>, new[] { "mid/" + ModuleContext.ModuleId }), false,
                    DotNetNuke.Security.SecurityAccessLevel.Edit, true, false);
                    
                <% } } %>
				return actions;
            }
        }
        #endregion
        <% } %>
        
        <% if(IModuleListener && AdditionalControl == MasterCodeBehind.ViewControl){ %>
        #region Implementation of IModuleListener
        public void OnModuleCommunication(object s, ModuleCommunicationEventArgs e)
        {
            throw new NotImplementedException();
        }        
        #endregion
        <% } %>
        
        <% if(IModuleCommunicator && AdditionalControl == MasterCodeBehind.ViewControl){ %>
        #region Implementation of IModuleCommunicator
        public event ModuleCommunicationEventHandler ModuleCommunication;

        private void OnModuleCommunication()
        {
            var args = new ModuleCommunicationEventArgs();
            args.Sender = Definition.ModuleName;
            args.Target = "Arbitrary Text";
            args.Text = "Payload Text";
            args.Type = "Custom Type";

            if (ModuleCommunication != null)
            {
                ModuleCommunication(this, args);
            }
        }
        #endregion
        <% } %>

<%-- Removing AJAX for WebAPI        
<% if(IncludeTemplateAjaxWrapper) { %>
        #region AJAX Functions
        /*
        protected string ExampleFunction(string paramName)
        {
            <%= MasterCodeBehind.Logging.DebugEnter(LoggingProvider, netVersion) %>
            Response.ContentType = "text/json";
            <%= MasterCodeBehind.Logging.DebugExit(LoggingProvider, netVersion) %>
            return "{'string' : 'Not yet implemented. \\'" + paramName + "\\''}";
        }
        */
        #endregion
<% } %>
--%>
        #region Event Handlers
<%-- Removing MVC
        protected override void OnInit(EventArgs e)
        {
            PageViewHost.Register(this, Context);
            base.OnInit(e);
        }
--%>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
        }
        /// <summary>
        /// Handles the Load event of the Page control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
        protected void Page_Load(object sender, EventArgs e)
        {
            <%-- Not in DNN 7
            Module = new ModuleInfo(ModuleContext);
            --%>
            Permissions = new Security(ModuleContext);
            
            <%= MasterCodeBehind.Logging.InitializeLoggingCall(LoggingProvider, netVersion) %>
            <%= MasterCodeBehind.Logging.LogDebug(LoggingProvider, netVersion, @"""Logging Enabled""") %>
            <%= MasterCodeBehind.Logging.DebugEnter(LoggingProvider, netVersion) %>

            
            try
            {
                <%-- Removing AJAX for WebAPI
                <% if(IncludeTemplateAjaxWrapper) { %>
                <%= MasterCodeBehind.Logging.LogInfo(LoggingProvider, netVersion, @"""Checking if this is our custom AJAX Request""") %>
                Generic.AjaxWrapper(this, Response, Request);
                <% } %>
                --%>
                Page.MaintainScrollPositionOnPostBack = true;
                if (!IsPostBack)
                {
                }

                SecuritySettings();
            }
            catch (Exception ex)
            {
<%= MasterCodeBehind.RemoteBugSub.DefaultWithException(RemoteBugSubProvider, netVersion) %>

                <%= MasterCodeBehind.Logging.LogFatal(LoggingProvider, netVersion, @"""ex.Message, ex""") %>
                Exceptions.ProcessModuleLoadException(this, ex);
            }
            <%= MasterCodeBehind.Logging.DebugExit(LoggingProvider, netVersion) %>
        }
<% if(AdditionalControl != MasterCodeBehind.ViewControl) { %>
        protected void lnkGoBack_Click(object sender, EventArgs e)
        {<%= 
            MasterCodeBehind.Logging.DebugEnter(LoggingProvider, netVersion) %>
            ((HttpResponse)sender).Redirect(Globals.NavigateURL(TabId));
            <%= MasterCodeBehind.Logging.DebugExit(LoggingProvider, netVersion) %>
        }
        <% } %>
        #endregion

        #region Security
        /// <summary>
        /// Sets up the required components for the security level.
        /// </summary>
        private void SecuritySettings()
        {
            <%= MasterCodeBehind.Logging.DebugEnter(LoggingProvider, netVersion) %>
            
            SecuritySettingsDefault();
            SecuritySettingsForAdministrator(Permissions.IsAdministrator);
            <% foreach(string s in (AdditionalPermissions + MasterCodeBehind.DefaultPermissions + (HasDnnExtendPermissions ? MasterCodeBehind.ExtendedPermissions : String.Empty))
                    .Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)) { %>
            SecuritySettingsFor<%= s %>(Permissions.IsAllowedTo<%= s %>);
            <% } %>
            <%= MasterCodeBehind.Logging.DebugExit(LoggingProvider, netVersion) %>
            }

        /// <summary>
        /// Default Set up of required components
        /// </summary>
        private void SecuritySettingsDefault()
        {
            <%= MasterCodeBehind.Logging.DebugEnter(LoggingProvider, netVersion) %>

            <%= MasterCodeBehind.Logging.LogDebug(LoggingProvider, netVersion, @"""Requesting jQuery Registration from DotNetNuke""") %>
            DotNetNuke.Framework.jQuery.RequestRegistration();
            
            <%= MasterCodeBehind.Logging.LogDebug(LoggingProvider, netVersion, @"""Registering the javascript file Framework""") %>
            ScriptManager.RegisterClientScriptInclude(Page, Page.GetType(), Page.ID + "Framework", ResolveUrl("js/Framework.js"));
            
            <%= MasterCodeBehind.Logging.LogDebug(LoggingProvider, netVersion, @"""Registering the javascript file " + CodeSafeModuleName + @")""") %>
            ScriptManager.RegisterClientScriptInclude(Page, Page.GetType(), Page.ID + "<%= CodeSafeModuleName %>", ResolveUrl("js/<%= CodeSafeModuleName %>.js"));
            
            <%= MasterCodeBehind.Logging.LogDebug(LoggingProvider, netVersion, @"""Registering the javascript file " + AdditionalControl + @")""") %>
            ScriptManager.RegisterClientScriptInclude(Page, Page.GetType(), Page.ID + "<%= AdditionalControl%>", ResolveUrl("js/<%= AdditionalControl%>.js"));

            ScriptManager.RegisterClientScriptInclude(Page, Page.GetType(), Page.ID + "dnnWebApiAjax", ResolveUrl("js/dnnWebApiAjax.js"));
            
            <%= MasterCodeBehind.Logging.LogInfo(LoggingProvider, netVersion, @"""Current Culture set to : "" + System.Threading.Thread.CurrentThread.CurrentUICulture") %>
            <%= MasterCodeBehind.Logging.LogInfo(LoggingProvider, netVersion, @"""Registering the javascript file Localized""") %>
            ScriptManager.RegisterClientScriptInclude(Page, Page.GetType(), Page.ID + "Localized.js", ResolveUrl("js/" + Universal.GetLocalizedFileName(MapPath(ControlPath) + "/js/Localized.js")));


            <%= MasterCodeBehind.Logging.DebugExit(LoggingProvider, netVersion) %> 
        }
        
        private void SecuritySettingsForAdministrator(bool hasAccess)
        {
            <%= MasterCodeBehind.Logging.DebugEnter(LoggingProvider, netVersion) %>

            <%= MasterCodeBehind.Logging.LogInfo(LoggingProvider, netVersion, @"""User ["" + Module.UserId + ""] has Administrator access : "" + hasAccess") %>
            if (hasAccess)
            {
                
            }

            <%= MasterCodeBehind.Logging.DebugExit(LoggingProvider, netVersion) %>
        }	
        
<% foreach(string s in (AdditionalPermissions + MasterCodeBehind.DefaultPermissions + (HasDnnExtendPermissions ? MasterCodeBehind.ExtendedPermissions : String.Empty)).Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries)) { %>
        private void SecuritySettingsFor<%= s %>(bool hasAccess)
        {
            <%= MasterCodeBehind.Logging.DebugEnter(LoggingProvider, netVersion) %>

            <%= MasterCodeBehind.Logging.LogInfo(LoggingProvider, netVersion, @"""User ["" + Module.UserId + ""] has " + s + @" access : "" + hasAccess") %>
            if(hasAccess)
            {
                <%= MasterCodeBehind.Logging.LogDebug(LoggingProvider, netVersion, @"""Registering the javascript file " + AdditionalControl + "Permission" + s + @")""") %>
                ScriptManager.RegisterClientScriptInclude(Page, Page.GetType(), Page.ID + "<%= AdditionalControl%>Permission<%= s %>", ResolveUrl("js/<%= AdditionalControl%>Permission<%= s %>.js"));
            }
            <%=             MasterCodeBehind.Logging.DebugExit(LoggingProvider, netVersion) %>
        }
<% } %>
        
        #endregion

        #region Get

        #endregion

        #region Display

        #endregion

        #region Save

        #endregion

        #region Acquire

        #endregion

        #region Clear
        
        #endregion

        #region General

        #endregion
    }
}